"use strict";

require("core-js/modules/es.typed-array.float32-array.js");

require("core-js/modules/es.typed-array.float64-array.js");

require("core-js/modules/es.typed-array.int8-array.js");

require("core-js/modules/es.typed-array.int16-array.js");

require("core-js/modules/es.typed-array.int32-array.js");

require("core-js/modules/es.typed-array.uint8-array.js");

require("core-js/modules/es.typed-array.uint8-clamped-array.js");

require("core-js/modules/es.typed-array.uint16-array.js");

require("core-js/modules/es.typed-array.uint32-array.js");

require("core-js/modules/es.typed-array.from.js");

require("core-js/modules/es.typed-array.of.js");

require("core-js/modules/web.immediate.js");

require("core-js/modules/web.url.js");

require("core-js/modules/web.url.to-json.js");

require("core-js/modules/web.url-search-params.js");

var model = _interopRequireWildcard(require("./model.js"));

var _recipeView = _interopRequireDefault(require("./view/recipeView.js"));

var _searchView = _interopRequireDefault(require("./view/searchView.js"));

var _resultsView = _interopRequireDefault(require("./view/resultsView.js"));

var _bookmarkView = _interopRequireDefault(require("./view/bookmarkView.js"));

var _paginationView = _interopRequireDefault(require("./view/paginationView.js"));

var _addRecipeView = _interopRequireDefault(require("./view/addRecipeView"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const {
  async
} = require('q');

// import { set } from 'core-js/fn/dict';
const recipeContainer = document.querySelector('.recipe'); // https://forkify-api.herokuapp.com/v2
////////////////////////////////////////

`https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bc886`;

if (module.hot) {
  module.hot.accept();
}

const controlRecipe = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;

    _recipeView.default.renderSpinner(); // 0)


    _resultsView.default.update(model.getSearchResultPage());

    _bookmarkView.default.update(model.state.bookmarks); // 1) loading recipe


    await model.loadRecipe(id); /// 2) rendering recipe

    _recipeView.default.render(model.state.recipe);
  } catch (err) {
    _recipeView.default.renderError();
  }
};

const controlSearchResults = async function () {
  try {
    _resultsView.default.renderSpinner();

    console.log(_resultsView.default); // 1) get query

    const query = _searchView.default.getQuery();

    if (!query) return; // 2) get data

    await model.loadSearchResults(query); // 3) render;

    _resultsView.default.render(model.getSearchResultPage()); //4 render pagination


    _paginationView.default.render(model.state.research);
  } catch (err) {
    console.log(err);
  }
};

const controlPagination = function (goToPage) {
  // 3) render new result
  _resultsView.default.render(model.getSearchResultPage(goToPage)); //4 render pagination


  _paginationView.default.render(model.state.research);
}; //


const controlServings = function (newServings) {
  //update the recipe state
  model.updateServings(newServings); // render the recipe
  //  recipeView.render(model.state.recipe)

  _recipeView.default.update(model.state.recipe);
};

const controlAddBookmark = function () {
  // 1) Add or remove bookmark
  if (!model.state.recipe.bookmarked) model.addBookmark(model.state.recipe);else model.removeBookmark(model.state.recipe.id); //2 Update recipe view

  _recipeView.default.update(model.state.recipe); //3 Render bookmark


  _bookmarkView.default.render(model.state.bookmarks);
};

const controlBookmark = function () {
  _bookmarkView.default.render(model.state.bookmarks);
};

const controlAddRecipe = async function (newRecipe) {
  try {
    //Upload the new Recipe data
    await model.uploadRecipe(newRecipe);
    console.log(model.state.recipe); //render Recipe

    _recipeView.default.render(model.state.recipe); //close form window


    setTimeout(function () {
      _addRecipeView.default.toggleWindow();
    }, 1000);
  } catch (err) {
    console.log(err);

    _addRecipeView.default.renderError(err.message);
  }
};

function init() {
  _bookmarkView.default.addHanlerRender(controlBookmark);

  _recipeView.default.addHandleRender(controlRecipe);

  _searchView.default.addHandleSearch(controlSearchResults);

  _paginationView.default.addHandlerClick(controlPagination);

  _recipeView.default.addHandlerUpdateServings(controlServings);

  _recipeView.default.addHandlerAddBookmark(controlAddBookmark);

  _addRecipeView.default.addHandlerUpload(controlAddRecipe);
}

init();