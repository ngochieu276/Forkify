"use strict";

require("core-js/modules/es.typed-array.float32-array");

require("core-js/modules/es.typed-array.float64-array");

require("core-js/modules/es.typed-array.int8-array");

require("core-js/modules/es.typed-array.int16-array");

require("core-js/modules/es.typed-array.int32-array");

require("core-js/modules/es.typed-array.uint8-array");

require("core-js/modules/es.typed-array.uint8-clamped-array");

require("core-js/modules/es.typed-array.uint16-array");

require("core-js/modules/es.typed-array.uint32-array");

require("core-js/modules/es.typed-array.from");

require("core-js/modules/es.typed-array.of");

require("core-js/modules/web.immediate");

require("core-js/modules/web.url");

require("core-js/modules/web.url.to-json");

require("core-js/modules/web.url-search-params");

var model = _interopRequireWildcard(require("./model.js"));

var _recipeView = _interopRequireDefault(require("./view/recipeView.js"));

var _searchView = _interopRequireDefault(require("./view/searchView.js"));

var _resultsView = _interopRequireDefault(require("./view/resultsView.js"));

var _paginationView = _interopRequireDefault(require("./view/paginationView.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const {
  async
} = require("q");

const recipeContainer = document.querySelector('.recipe'); // https://forkify-api.herokuapp.com/v2
////////////////////////////////////////

`https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bc886`;

if (module.hot) {
  module.hot.accept();
}

const controlRecipe = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;

    _recipeView.default.renderSpinner(); // 1) loading recipe


    await model.loadRecipe(id); /// 2) rendering recipe

    _recipeView.default.render(model.state.recipe);

    console.log(_recipeView.default);
  } catch (err) {
    _recipeView.default.renderError();
  }
};

const controlSearchResults = async function () {
  try {
    _resultsView.default.renderSpinner();

    console.log(_resultsView.default); // 1) get query

    const query = _searchView.default.getQuery();

    if (!query) return; // 2) get data

    await model.loadSearchResults(query); // 3) render;

    _resultsView.default.render(model.getSearchResultPage(1)); //4 render pagination


    _paginationView.default.render(model.state.research);
  } catch (err) {
    console.log(err);
  }
};

const controlPagination = function (goToPage) {
  // 3) render new result
  _resultsView.default.render(model.getSearchResultPage(goToPage)); //4 render pagination


  _paginationView.default.render(model.state.research);
}; //


const controlServings = function (newServings) {
  //update the recipe state
  model.updateRecipeState(newServings); // render the recipe

  _recipeView.default.render(this.state.recipe);
};

function init() {
  _recipeView.default.addHandleRender(controlRecipe); // recipeView.addHandlerUpdateServings(controlServings);


  _searchView.default.addHandleSearch(controlSearchResults);

  _paginationView.default.addHandlerClick(controlPagination);
}

init();